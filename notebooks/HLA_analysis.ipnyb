{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "import sys\n",
    "import pickle as pkl\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import os\n",
    "import sys\n",
    "from matplotlib import cm\n",
    "from matplotlib import pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "#from utils import helpers\n",
    "from utils import add_features\n",
    "from utils.stats_and_plot_utils import multitest_BH,\\\n",
    "    compute_pvalues,\\\n",
    "        annot_stat,\\\n",
    "            clean_df_total,\\\n",
    "                plot_microorganism_counts,\\\n",
    "                    plot_peptide_dist,\\\n",
    "                    create_relative_abund_plots_single,\\\n",
    "                    plot_species,\\\n",
    "                    parse_and_plot_species\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_agilent_raw = pkl.load(open('../Vogl_2021_data_PhIP-Seq/df_info_agilent_final.pkl', 'rb')) # change to a more portable table\n",
    "\n",
    "df_agilent_raw = df_agilent_raw.reset_index().rename(columns={'index' : 'peptide_name'})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Add functional annotations\n",
    "df_agilent = add_features.map_predictions(df_agilent_raw)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Import GWAS tables\n",
    "# Download file from https://ars.els-cdn.com/content/image/1-s2.0-S1074761323001711-mmc3.xlsx\n",
    "# Open the sheets 2.2 and 2.3 which contain significant genetic associations and significant genetic imputations to HLA\n",
    "df = pd.read_excel('media-4.xlsx', sheet_name='SupTable2.3')\n",
    "df2_2 = pd.read_excel('media-4.xlsx', sheet_name='SupTable2.2')\n",
    "# And all peptides used in GWAS analysis in sheet 1.1 (https://ars.els-cdn.com/content/image/1-s2.0-S1074761323001711-mmc2.xlsx)\n",
    "df_GWAS = pd.read_excel('/Users/gabrielinnocenti/Downloads/SupplementaryTable1.xlsx', sheet_name='SupTable1.1')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Get unique peptides in imputation file (lowest Bonferroni_p_value)\n",
    "df_unique = pd.DataFrame(df.sort_values('peptide').groupby('peptide')['Bonferroni_ind'].min().reset_index(0))\n",
    "\n",
    "# Get peptides which are only HLA associated\n",
    "df_agilent_final = df_agilent[df_agilent['peptide_name'].isin(df_unique['peptide'])]\n",
    "\n",
    "# Get all peptides used in GWAS and remove the ones which have imputations to HLA alleles\n",
    "list_GWAS_peptides = df_GWAS[df_GWAS['Peptide'].str.contains('agilent')]['Peptide'].unique()\n",
    "df_tested_agilent = df_agilent[df_agilent['peptide_name'].isin(list_GWAS_peptides)]\n",
    "df_tested_agilent_clean = df_tested_agilent[df_tested_agilent['peptide_name'].\n",
    "                                            isin(df_agilent_final['peptide_name']) == False]\n",
    "# This is for subtracting the peptides that are labelled as HLA associated \n",
    "# from the set of bound peptides (GWAS tested)\n",
    "# peptides_HLA = df2_2[(df2_2['P.value'] <= 5.67e-11) & (df2_2['CHR'] ==6) & (df2_2['peptide'].str.contains('agilent'))]['peptide'].unique()\n",
    "# df_HLA_GWAS = df_agilent[df_agilent['peptide_name'].isin(peptides_HLA)]\n",
    "# df_tested_agilent_clean2 = df_tested_agilent[df_tested_agilent['peptide_name'].\n",
    "#                                              isin(df_HLA_GWAS['peptide_name']) == False]\n",
    "\n",
    "# Now create a table also for all the rest of the peptides (Entire library, cleaning from all the peptides that were tested\n",
    "# or HLA associated)\n",
    "agilent_total_clean2 = df_agilent[df_agilent['peptide_name'].isin(df_tested_agilent['peptide_name']) == False]\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Use these annotations and features\n",
    "# Get relevant features\n",
    "relevant_agilent = ['is_infect', 'is_patho', 'is_toxin','is_EBV',\n",
    "       'is_EM', 'is_MPA', 'is_IgA', 'is_probio', 'is_auto', 'is_pos_cntrl', 'is_neg_cntrl',\n",
    "       'is_rand_cntrl'] # 'is_infect' outside and put in \n",
    "renamed_agilent = ['ImmunoEpitope DB (infectious pathogens)', 'Gut pathogens', 'Virulence Factor DB','Epstein-Barr Virus',\n",
    "            'Microbiota genes', 'Microbiota strains',\n",
    "            'Antibody-coated strains', 'Probiotic strains', 'Human Autoantigens', 'Positive control', 'Negative control', 'Random control',\n",
    "           ]\n",
    "relevant_functional_agilent = ['signalp6_slow',\n",
    "                               'diamond_mmseqs_intersec_toxin',\n",
    "                               'is_flagellum',\n",
    "                               'is_topgraph_new_&_old']\n",
    "renamed_agilent_func = ['Secreted proteins (signalp6)',\n",
    "                        'Toxin (mmseqs+diamond intersec)',\n",
    "                        'Flagellum proteins (metadata+diamond)',\n",
    "                        'Membrane proteins (topgraph new+old sum)']\n",
    "# Plot\n",
    "colors = ['lightgrey', 'lightskyblue', 'tab:red']\n",
    "classes = ['Entire library', 'GWAS\\nAntibody bound', 'HLA associated']\n",
    "# create_relative_abund_plots_single([agilent_total_clean2,\n",
    "#                              df_tested_agilent_clean,\n",
    "#                              df_agilent_final],\n",
    "#                             relevant_functional_agilent,\n",
    "#                             renamed_agilent_func,\n",
    "#                             color=colors,\n",
    "#                             multitest_correction=True,\n",
    "#                             classes=classes,\n",
    "#                             count_on_bars=False\n",
    "#                            )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "colors = ['lightgrey', 'lightskyblue', 'tab:red']\n",
    "classes = ['Entire library', 'GWAS\\nAntibody bound', 'HLA associated']\n",
    "# create_relative_abund_plots_single([agilent_total_clean2,\n",
    "#                              df_tested_agilent_clean,\n",
    "#                              df_agilent_final]#\n",
    "#                              ,\n",
    "#                             relevant_agilent,\n",
    "#                             renamed_agilent,\n",
    "#                             color=colors,\n",
    "#                             multitest_correction=True,\n",
    "#                             classes=classes,\n",
    "#                             count_on_bars=False,\n",
    "#                            )"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Here we use organism information and protein name infos.\n",
    "Code for now is too redundant, to optimize in a future update."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_bonf = pd.DataFrame(df.groupby('peptide').min('Bonferroni_ind'))\n",
    "df_bonf[df_bonf.index.str.contains('agilent')].index\n",
    "df_bonf.reset_index(inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_unique.columns = ['peptide', 'Bonferroni_min']\n",
    "\n",
    "bonferroni_agilent_df = df_unique[df_unique['peptide'].str.contains('agil')][['peptide', 'Bonferroni_min']]\n",
    "merge_bonf_agilent_df = pd.merge(df_agilent, bonferroni_agilent_df, left_on='peptide_name', right_on='peptide').sort_values(by='Bonferroni_min')\n",
    "merge_bonf_agilent_df = merge_bonf_agilent_df.drop(columns='peptide')\n",
    "\n",
    "# now for each group (Toxins, Gut Patho, IEDB, EBV, Microbiota genes, Microbiota strains) create a table\n",
    "groups = ['is_infect', 'is_EBV',\n",
    "    'is_toxin', 'is_EM', 'is_MPA', 'is_patho']\n",
    "\n",
    "merge_bonf_agilent_df['Taxon'] = merge_bonf_agilent_df['Organism_complete_name']\n",
    "merge_bonf_agilent_df['Taxon (uniref)'] = merge_bonf_agilent_df['uniref_func'].dropna().apply(lambda x: x.split(' Tax=')[1].split(' T')[0])\n",
    "merge_bonf_agilent_df['Taxon (IEDB)'] = merge_bonf_agilent_df['IEDB_organism_name']\n",
    "merge_bonf_agilent_df['Taxon (VFDB)'] = merge_bonf_agilent_df['toxin_prot_name']\n",
    "merge_bonf_agilent_df['Taxon (src)'] = merge_bonf_agilent_df['bac_src']\n",
    "\n",
    "merge_bonf_agilent_df['Protein name (uniref)'] = merge_bonf_agilent_df['uniref_func'].dropna().apply(lambda x: x.split(' n=')[0])\n",
    "merge_bonf_agilent_df\n",
    "# Uncomment to use secreted proteins which are not also membrane \n",
    "# array_others = np.where((merge_bonf_agilent_df['secreted_not_attached'] == 0) & (merge_bonf_agilent_df['is_topgraph_new_&_old'] == 0))[0]\n",
    "# print(array_others)\n",
    "# merge_bonf_agilent_df['Type'] = np.where(merge_bonf_agilent_df['secreted_not_attached'] == 1, 'Secreted', 'Membrane attached')\n",
    "# merge_bonf_agilent_df.loc['Type']\n",
    "# merge_bonf_agilent_df.loc[array_others,'Type'] = 'Other'\n",
    "merge_bonf_agilent_df['Protein name (uniref) and pos'] = merge_bonf_agilent_df['Protein name (uniref)'] + (' (pos. ' + merge_bonf_agilent_df['pos'].astype(str) + ' - ' + (merge_bonf_agilent_df['pos'] + 64).astype(str) + ')')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/var/folders/lx/dvbfjqsd7wq4sr2wbc_g52p40000gn/T/ipykernel_23673/723242616.py:69: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  x['Protein name (uniref)'] = x['uniref_func'].apply(lambda x: x.split(' n=')[0].strip())\n",
      "/var/folders/lx/dvbfjqsd7wq4sr2wbc_g52p40000gn/T/ipykernel_23673/723242616.py:13: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  x['organism_name'] = x['Taxon']\n",
      "/var/folders/lx/dvbfjqsd7wq4sr2wbc_g52p40000gn/T/ipykernel_23673/723242616.py:14: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  x['class'] = i\n",
      "/var/folders/lx/dvbfjqsd7wq4sr2wbc_g52p40000gn/T/ipykernel_23673/723242616.py:69: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  x['Protein name (uniref)'] = x['uniref_func'].apply(lambda x: x.split(' n=')[0].strip())\n",
      "/var/folders/lx/dvbfjqsd7wq4sr2wbc_g52p40000gn/T/ipykernel_23673/723242616.py:20: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  x['organism_name'] = 'Epstein-Barr'\n",
      "/var/folders/lx/dvbfjqsd7wq4sr2wbc_g52p40000gn/T/ipykernel_23673/723242616.py:21: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  x['class'] = i\n",
      "/var/folders/lx/dvbfjqsd7wq4sr2wbc_g52p40000gn/T/ipykernel_23673/723242616.py:69: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  x['Protein name (uniref)'] = x['uniref_func'].apply(lambda x: x.split(' n=')[0].strip())\n",
      "/var/folders/lx/dvbfjqsd7wq4sr2wbc_g52p40000gn/T/ipykernel_23673/723242616.py:28: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  x['organism_name'] = x['Taxon']\n",
      "/var/folders/lx/dvbfjqsd7wq4sr2wbc_g52p40000gn/T/ipykernel_23673/723242616.py:29: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  x['class'] = i\n",
      "/var/folders/lx/dvbfjqsd7wq4sr2wbc_g52p40000gn/T/ipykernel_23673/723242616.py:69: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  x['Protein name (uniref)'] = x['uniref_func'].apply(lambda x: x.split(' n=')[0].strip())\n",
      "/var/folders/lx/dvbfjqsd7wq4sr2wbc_g52p40000gn/T/ipykernel_23673/723242616.py:38: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  x['organism_name'] = x['Taxon']\n",
      "/var/folders/lx/dvbfjqsd7wq4sr2wbc_g52p40000gn/T/ipykernel_23673/723242616.py:39: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  x['class'] = i\n",
      "/var/folders/lx/dvbfjqsd7wq4sr2wbc_g52p40000gn/T/ipykernel_23673/723242616.py:69: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  x['Protein name (uniref)'] = x['uniref_func'].apply(lambda x: x.split(' n=')[0].strip())\n",
      "/var/folders/lx/dvbfjqsd7wq4sr2wbc_g52p40000gn/T/ipykernel_23673/723242616.py:46: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  x['organism_name'] = x['Taxon']\n",
      "/var/folders/lx/dvbfjqsd7wq4sr2wbc_g52p40000gn/T/ipykernel_23673/723242616.py:47: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  x['class'] = i\n",
      "/var/folders/lx/dvbfjqsd7wq4sr2wbc_g52p40000gn/T/ipykernel_23673/723242616.py:69: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  x['Protein name (uniref)'] = x['uniref_func'].apply(lambda x: x.split(' n=')[0].strip())\n",
      "/var/folders/lx/dvbfjqsd7wq4sr2wbc_g52p40000gn/T/ipykernel_23673/723242616.py:54: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  x['organism_name'] = x['Taxon']\n",
      "/var/folders/lx/dvbfjqsd7wq4sr2wbc_g52p40000gn/T/ipykernel_23673/723242616.py:55: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  x['class'] = i\n",
      "/var/folders/lx/dvbfjqsd7wq4sr2wbc_g52p40000gn/T/ipykernel_23673/723242616.py:77: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  x['Protein name (uniref)'] = x['uniref_func'].apply(lambda x: x.split(' n=')[0].strip())\n",
      "/var/folders/lx/dvbfjqsd7wq4sr2wbc_g52p40000gn/T/ipykernel_23673/723242616.py:80: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  x['organism_name'] = x['Organism_complete_name']\n",
      "/var/folders/lx/dvbfjqsd7wq4sr2wbc_g52p40000gn/T/ipykernel_23673/723242616.py:81: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  x['class'] = i\n",
      "/var/folders/lx/dvbfjqsd7wq4sr2wbc_g52p40000gn/T/ipykernel_23673/723242616.py:77: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  x['Protein name (uniref)'] = x['uniref_func'].apply(lambda x: x.split(' n=')[0].strip())\n",
      "/var/folders/lx/dvbfjqsd7wq4sr2wbc_g52p40000gn/T/ipykernel_23673/723242616.py:86: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  x['organism_name'] = 'Epstein-Barr'\n",
      "/var/folders/lx/dvbfjqsd7wq4sr2wbc_g52p40000gn/T/ipykernel_23673/723242616.py:87: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  x['class'] = i\n",
      "/var/folders/lx/dvbfjqsd7wq4sr2wbc_g52p40000gn/T/ipykernel_23673/723242616.py:77: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  x['Protein name (uniref)'] = x['uniref_func'].apply(lambda x: x.split(' n=')[0].strip())\n",
      "/var/folders/lx/dvbfjqsd7wq4sr2wbc_g52p40000gn/T/ipykernel_23673/723242616.py:93: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  x['organism_name'] = x['Organism_complete_name']\n",
      "/var/folders/lx/dvbfjqsd7wq4sr2wbc_g52p40000gn/T/ipykernel_23673/723242616.py:94: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  x['class'] = i\n",
      "/var/folders/lx/dvbfjqsd7wq4sr2wbc_g52p40000gn/T/ipykernel_23673/723242616.py:77: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  x['Protein name (uniref)'] = x['uniref_func'].apply(lambda x: x.split(' n=')[0].strip())\n",
      "/var/folders/lx/dvbfjqsd7wq4sr2wbc_g52p40000gn/T/ipykernel_23673/723242616.py:102: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  x['organism_name'] = x['Organism_complete_name']\n",
      "/var/folders/lx/dvbfjqsd7wq4sr2wbc_g52p40000gn/T/ipykernel_23673/723242616.py:103: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  x['class'] = i\n",
      "/var/folders/lx/dvbfjqsd7wq4sr2wbc_g52p40000gn/T/ipykernel_23673/723242616.py:77: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  x['Protein name (uniref)'] = x['uniref_func'].apply(lambda x: x.split(' n=')[0].strip())\n",
      "/var/folders/lx/dvbfjqsd7wq4sr2wbc_g52p40000gn/T/ipykernel_23673/723242616.py:109: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  x['organism_name'] = x['Organism_complete_name']\n",
      "/var/folders/lx/dvbfjqsd7wq4sr2wbc_g52p40000gn/T/ipykernel_23673/723242616.py:110: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  x['class'] = i\n",
      "/var/folders/lx/dvbfjqsd7wq4sr2wbc_g52p40000gn/T/ipykernel_23673/723242616.py:77: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  x['Protein name (uniref)'] = x['uniref_func'].apply(lambda x: x.split(' n=')[0].strip())\n",
      "/var/folders/lx/dvbfjqsd7wq4sr2wbc_g52p40000gn/T/ipykernel_23673/723242616.py:116: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  x['organism_name'] = x['Organism_complete_name']\n",
      "/var/folders/lx/dvbfjqsd7wq4sr2wbc_g52p40000gn/T/ipykernel_23673/723242616.py:117: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  x['class'] = i\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "      peptide_name                                            nuc_seq  pos  \\\n",
      "3466  agilent_3466  GGTAGCCGTGAACGCGCACGTGGTCGTGGTCGCGGTCGTGGCGAAA...  363   \n",
      "7115  agilent_7115  CCGCCGCGCACTCCAACCTGGGAATCTCCGGCTCGCCCGGAAACCC...  340   \n",
      "8065  agilent_8065  CGTGGCCGCGGCCGCGGCGGTGGCCGTCCGGGTGCGCCAGGCGGCA...   44   \n",
      "\n",
      "      len_seq                                          full name  \\\n",
      "3466    641.0  Epstein-Barr nuclear antigen 1 & EBNA-1 protei...   \n",
      "7115    404.0  early antigen protein D [Human gammaherpesviru...   \n",
      "8065    641.0  Epstein-Barr nuclear antigen 1 & EBNA-1 protei...   \n",
      "\n",
      "                                                   file  \\\n",
      "3466  IEDB_and_control\\full_iedb_oligos_list_clst70_...   \n",
      "7115  IEDB_and_control\\full_iedb_oligos_list_clst70_...   \n",
      "8065  IEDB_and_control\\full_iedb_oligos_list_clst70_...   \n",
      "\n",
      "                                                 aa_seq       end0_len15  \\\n",
      "3466  GSRERARGRGRGRGEKRPRSPSSQSSSSGSPPRRPPPGRRPFFHPV...  CCGGACGGCGAACCG   \n",
      "7115  PPRTPTWESPARPETPSPAIPSHSSNTALERPLAVQLARKRTSSEA...  TTCAACCCGCTCATC   \n",
      "8065  RGRGRGGGRPGAPGGSGSGPRHRDGVRRPQKRPSCIGCKGTHGGTG...  GGTGCGGGCGGTGGT   \n",
      "\n",
      "              hash0_len15       end1_len15  ...  uniref_bsc uniref_bsc_diff  \\\n",
      "3466  -942399227514409875  CACCAGGAAGGTGGC  ...      1088.0            27.0   \n",
      "7115   -66553112014999815  AAGGTTAAACAGGCG  ...       827.0           141.0   \n",
      "8065  6550964484837929189  GGTGCTGGTGGTGCA  ...      1088.0            27.0   \n",
      "\n",
      "                                            uniref_func is_flagellum  \\\n",
      "3466  Epstein-Barr nuclear antigen 1 n=37 Tax=Epstei...            0   \n",
      "7115  DNA polymerase processivity factor BMRF1 n=54 ...            0   \n",
      "8065  Epstein-Barr nuclear antigen 1 n=37 Tax=Epstei...            0   \n",
      "\n",
      "      signalp6_slow is_topgraph_new  is_topgraph_new_&_old  \\\n",
      "3466              0               1                      1   \n",
      "7115              0               1                      1   \n",
      "8065              0               1                      1   \n",
      "\n",
      "      diamond_mmseqs_intersec_toxin           Organism_complete_name  \\\n",
      "3466                              0  Epstein-Barr virus (strain GD1)   \n",
      "7115                              0  Epstein-Barr virus (strain GD1)   \n",
      "8065                              0  Epstein-Barr virus (strain GD1)   \n",
      "\n",
      "                         Protein name (uniref)  \n",
      "3466            Epstein-Barr nuclear antigen 1  \n",
      "7115  DNA polymerase processivity factor BMRF1  \n",
      "8065            Epstein-Barr nuclear antigen 1  \n",
      "\n",
      "[3 rows x 96 columns]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/var/folders/lx/dvbfjqsd7wq4sr2wbc_g52p40000gn/T/ipykernel_23673/723242616.py:128: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  x['Protein name (uniref)'] = x['uniref_func'].apply(lambda x: x.split(' n=')[0].strip())\n",
      "/var/folders/lx/dvbfjqsd7wq4sr2wbc_g52p40000gn/T/ipykernel_23673/723242616.py:131: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  x['organism_name'] = x['Organism_complete_name']\n",
      "/var/folders/lx/dvbfjqsd7wq4sr2wbc_g52p40000gn/T/ipykernel_23673/723242616.py:132: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  x['class'] = i\n",
      "/var/folders/lx/dvbfjqsd7wq4sr2wbc_g52p40000gn/T/ipykernel_23673/723242616.py:128: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  x['Protein name (uniref)'] = x['uniref_func'].apply(lambda x: x.split(' n=')[0].strip())\n",
      "/var/folders/lx/dvbfjqsd7wq4sr2wbc_g52p40000gn/T/ipykernel_23673/723242616.py:137: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  x['organism_name'] = 'Epstein-Barr'\n",
      "/var/folders/lx/dvbfjqsd7wq4sr2wbc_g52p40000gn/T/ipykernel_23673/723242616.py:138: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  x['class'] = i\n",
      "/var/folders/lx/dvbfjqsd7wq4sr2wbc_g52p40000gn/T/ipykernel_23673/723242616.py:128: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  x['Protein name (uniref)'] = x['uniref_func'].apply(lambda x: x.split(' n=')[0].strip())\n",
      "/var/folders/lx/dvbfjqsd7wq4sr2wbc_g52p40000gn/T/ipykernel_23673/723242616.py:144: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  x['organism_name'] = x['Organism_complete_name']\n",
      "/var/folders/lx/dvbfjqsd7wq4sr2wbc_g52p40000gn/T/ipykernel_23673/723242616.py:145: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  x['class'] = i\n",
      "/var/folders/lx/dvbfjqsd7wq4sr2wbc_g52p40000gn/T/ipykernel_23673/723242616.py:128: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  x['Protein name (uniref)'] = x['uniref_func'].apply(lambda x: x.split(' n=')[0].strip())\n",
      "/var/folders/lx/dvbfjqsd7wq4sr2wbc_g52p40000gn/T/ipykernel_23673/723242616.py:153: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  x['organism_name'] = x['Organism_complete_name']\n",
      "/var/folders/lx/dvbfjqsd7wq4sr2wbc_g52p40000gn/T/ipykernel_23673/723242616.py:154: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  x['class'] = i\n",
      "/var/folders/lx/dvbfjqsd7wq4sr2wbc_g52p40000gn/T/ipykernel_23673/723242616.py:128: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  x['Protein name (uniref)'] = x['uniref_func'].apply(lambda x: x.split(' n=')[0].strip())\n",
      "/var/folders/lx/dvbfjqsd7wq4sr2wbc_g52p40000gn/T/ipykernel_23673/723242616.py:160: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  x['organism_name'] = x['Organism_complete_name']\n",
      "/var/folders/lx/dvbfjqsd7wq4sr2wbc_g52p40000gn/T/ipykernel_23673/723242616.py:161: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  x['class'] = i\n",
      "/var/folders/lx/dvbfjqsd7wq4sr2wbc_g52p40000gn/T/ipykernel_23673/723242616.py:128: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  x['Protein name (uniref)'] = x['uniref_func'].apply(lambda x: x.split(' n=')[0].strip())\n",
      "/var/folders/lx/dvbfjqsd7wq4sr2wbc_g52p40000gn/T/ipykernel_23673/723242616.py:167: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  x['organism_name'] = x['Organism_complete_name']\n",
      "/var/folders/lx/dvbfjqsd7wq4sr2wbc_g52p40000gn/T/ipykernel_23673/723242616.py:168: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  x['class'] = i\n"
     ]
    }
   ],
   "source": [
    "# now for each group (Toxins, Gut Patho, IEDB, EBV, Microbiota genes, Microbiota strains) create a table for HLA associated\n",
    "groups = ['is_infect', 'is_EBV',\n",
    "    'is_toxin', 'is_EM', 'is_MPA', 'is_patho']\n",
    "\n",
    "a = merge_bonf_agilent_df[['peptide_name', 'is_infect', 'is_EBV', 'bac_src',\n",
    "    'is_toxin', 'is_EM', 'is_MPA', 'is_patho', 'IEDB_organism_name', 'toxin_prot_name', 'uniref_func', 'Bonferroni_min',\n",
    "    'is_flagellum', 'diamond_mmseqs_intersec_toxin', 'signalp6_slow', 'is_topgraph_new_&_old', 'Taxon']]\n",
    "\n",
    "def make_table_sources(x, i, concat):\n",
    "    \n",
    "    if i == 'is_infect':\n",
    "        #x['organism_name'] = x['IEDB_organism_name'].apply(lambda x: x.split('\\'')[1].strip())\n",
    "        x['organism_name'] = x['Taxon']\n",
    "        x['class'] = i\n",
    "        x = x[['peptide_name', 'organism_name', 'Protein name (uniref)', 'Bonferroni_min', 'class']]\n",
    "        concat.append(x)\n",
    "        # x.to_excel('Test_annotations_groups_AntibodyBound_and_HLA_assoc.xlsx', sheet_name=i)\n",
    "    if i == 'is_EBV':\n",
    "        #x['organism_name'] = 'Epstain-Barr virus'\n",
    "        x['organism_name'] = 'Epstein-Barr'\n",
    "        x['class'] = i\n",
    "        x = x[['peptide_name', 'organism_name', 'Protein name (uniref)', 'Bonferroni_min', 'class']]\n",
    "        concat.append(x)\n",
    "        # with pd.ExcelWriter('Test_annotations_groups_AntibodyBound_and_HLA_assoc.xlsx', mode='a') as writer:\n",
    "        #      x.to_excel(writer, sheet_name=i, index=False)\n",
    "    if i == 'is_toxin':\n",
    "        #x['organism_name'] = x['toxin_prot_name'].apply(lambda x: x.split('[')[2].split(']')[0].strip())\n",
    "        x['organism_name'] = x['Taxon']\n",
    "        x['class'] = i\n",
    "        x = x[['peptide_name', 'organism_name', 'Protein name (uniref)', 'Bonferroni_min', 'class']]\n",
    "        concat.append(x)\n",
    "        # with pd.ExcelWriter('Test_annotations_groups_AntibodyBound_and_HLA_assoc.xlsx', mode='a') as writer:\n",
    "        #      x.to_excel(writer, sheet_name=i, index=False)\n",
    "    if i == 'is_EM':\n",
    "        #x['organism_name_uniref'] = x['uniref_func'].apply(lambda x: x.split(' Tax=')[1].split(' T')[0].strip() + ' (uniref annot)')\n",
    "        #x['organism_name_tox'] = x['bac_src'].apply(lambda x: x.split(' &')[0].strip() if type(x) != float else x)\n",
    "        #x['organism_name'] = x['organism_name_tox'].fillna(x['organism_name_uniref'])\n",
    "        x['organism_name'] = x['Taxon']\n",
    "        x['class'] = i\n",
    "        x = x[['peptide_name', 'organism_name', 'Protein name (uniref)', 'Bonferroni_min', 'class']]\n",
    "        concat.append(x)\n",
    "        # with pd.ExcelWriter('Test_annotations_groups_AntibodyBound_and_HLA_assoc.xlsx', mode='a') as writer:\n",
    "        #      x.to_excel(writer, sheet_name=i, index=False)\n",
    "    if i == 'is_MPA':\n",
    "        #x['organism_name'] = x['bac_src'].apply(lambda x: x.split(' &')[0].strip())\n",
    "        x['organism_name'] = x['Taxon']\n",
    "        x['class'] = i\n",
    "        x = x[['peptide_name', 'organism_name', 'Protein name (uniref)', 'Bonferroni_min', 'class']]\n",
    "        concat.append(x)\n",
    "        # with pd.ExcelWriter('Test_annotations_groups_AntibodyBound_and_HLA_assoc.xlsx', mode='a') as writer:\n",
    "        #      x.to_excel(writer, sheet_name=i, index=False)\n",
    "    if i == 'is_patho':\n",
    "        #x['organism_name'] = x['bac_src'].apply(lambda x: x.split(' &')[0].strip())\n",
    "        x['organism_name'] = x['Taxon']\n",
    "        x['class'] = i\n",
    "        x = x[['peptide_name', 'organism_name', 'Protein name (uniref)', 'Bonferroni_min', 'class']]\n",
    "        concat.append(x)\n",
    "        # with pd.ExcelWriter('Test_annotations_groups_AntibodyBound_and_HLA_assoc.xlsx', mode='a') as writer:\n",
    "        #      x.to_excel(writer, sheet_name=i, index=False)\n",
    "    return concat\n",
    "# use bac_src for is_MPA and is_patho.\n",
    "# use IEDB_organism_name for is_infect\n",
    "# use 'Epstain-Barr virus' for is_EBV\n",
    "# use toxin_prot_name for is_toxin\n",
    "# use uniref_func for is_EM\n",
    "concat = []\n",
    "for i in groups:\n",
    "    x = a[a[i] == 1]\n",
    "    x['Protein name (uniref)'] = x['uniref_func'].apply(lambda x: x.split(' n=')[0].strip())\n",
    "    concat = make_table_sources(x, i, concat)\n",
    "HLA_species = pd.concat(concat)\n",
    "\n",
    "# Same for GWAS tested and entire library\n",
    "concat = []\n",
    "for i in groups:\n",
    "    x = df_tested_agilent_clean[df_tested_agilent_clean[i] == 1]\n",
    "    x['Protein name (uniref)'] = x['uniref_func'].apply(lambda x: x.split(' n=')[0].strip())\n",
    "    if i == 'is_infect':\n",
    "        #x['organism_name'] = x['IEDB_organism_name'].apply(lambda x: x.split('\\'')[1].strip())\n",
    "        x['organism_name'] = x['Organism_complete_name']\n",
    "        x['class'] = i\n",
    "        x = x[['peptide_name', 'organism_name', 'Protein name (uniref)', 'class']]\n",
    "        concat.append(x)\n",
    "    if i == 'is_EBV':\n",
    "        print(x[x[i] == 1])\n",
    "        x['organism_name'] = 'Epstein-Barr'\n",
    "        x['class'] = i\n",
    "        x = x[['peptide_name', 'organism_name', 'Protein name (uniref)', 'class']]\n",
    "        # print(i, len(x['organism_name'].unique()))\n",
    "        concat.append(x)\n",
    "    if i == 'is_toxin':\n",
    "        #x['organism_name'] = x['toxin_prot_name'].apply(lambda x: x.split('[')[2].split(']')[0].strip())\n",
    "        x['organism_name'] = x['Organism_complete_name']\n",
    "        x['class'] = i\n",
    "        x = x[['peptide_name', 'organism_name', 'Protein name (uniref)', 'class']]\n",
    "        # print(i, len(x['organism_name'].unique()))\n",
    "        concat.append(x)\n",
    "    if i == 'is_EM':\n",
    "        #x['organism_name_uniref'] = x['uniref_func'].apply(lambda x: x.split(' Tax=')[1].split(' T')[0].strip() + ' (uniref annot)')\n",
    "        #x['organism_name_tox'] = x['bac_src'].apply(lambda x: x.split(' &')[0].strip() if type(x) != float else x)\n",
    "        #x['organism_name'] = x['organism_name_tox'].fillna(x['organism_name_uniref'])\n",
    "        x['organism_name'] = x['Organism_complete_name']\n",
    "        x['class'] = i\n",
    "        x = x[['peptide_name', 'organism_name', 'Protein name (uniref)', 'class']]\n",
    "        # print(i, len(x['organism_name'].unique()))\n",
    "        concat.append(x)\n",
    "    if i == 'is_MPA':\n",
    "        #x['organism_name'] = x['bac_src'].apply(lambda x: x.split(' &')[0].strip())\n",
    "        x['organism_name'] = x['Organism_complete_name']\n",
    "        x['class'] = i\n",
    "        x = x[['peptide_name', 'organism_name', 'Protein name (uniref)', 'class']]\n",
    "        # print(i, len(x['organism_name'].unique()))\n",
    "        concat.append(x)\n",
    "    if i == 'is_patho':\n",
    "        #x['organism_name'] = x['bac_src'].apply(lambda x: x.split(' &')[0].strip())\n",
    "        x['organism_name'] = x['Organism_complete_name']\n",
    "        x['class'] = i\n",
    "        x = x[['peptide_name', 'organism_name', 'Protein name (uniref)', 'class']]\n",
    "        # print(i, len(x['organism_name'].unique()))\n",
    "        concat.append(x)\n",
    "GWAS_species = pd.concat(concat)\n",
    "\n",
    "# Now all data\n",
    "agilent_total_clean2_taxa = agilent_total_clean2[agilent_total_clean2['uniref_func'].str.contains('Tax=') == True]\n",
    "concat = []\n",
    "for i in groups:\n",
    "    x = agilent_total_clean2_taxa[(agilent_total_clean2_taxa[i] == 1) & (agilent_total_clean2_taxa['uniref_func'].isnull() == False)]\n",
    "    x['Protein name (uniref)'] = x['uniref_func'].apply(lambda x: x.split(' n=')[0].strip())\n",
    "    if i == 'is_infect':\n",
    "        #x['organism_name'] = x['IEDB_organism_name'].apply(lambda x: x.split('\\'')[1].strip())\n",
    "        x['organism_name'] = x['Organism_complete_name']\n",
    "        x['class'] = i\n",
    "        x = x[['peptide_name', 'organism_name', 'Protein name (uniref)', 'class']]\n",
    "        \n",
    "        concat.append(x)\n",
    "    if i == 'is_EBV':\n",
    "        x['organism_name'] = 'Epstein-Barr'\n",
    "        x['class'] = i\n",
    "        x = x[['peptide_name', 'organism_name', 'Protein name (uniref)', 'class']]\n",
    "        \n",
    "        concat.append(x)\n",
    "    if i == 'is_toxin':\n",
    "        #x['organism_name'] = x['toxin_prot_name'].apply(lambda x: x.split('[')[2].split(']')[0].strip())\n",
    "        x['organism_name'] = x['Organism_complete_name']\n",
    "        x['class'] = i\n",
    "        x = x[['peptide_name', 'organism_name', 'Protein name (uniref)', 'class']]\n",
    "        \n",
    "        concat.append(x)\n",
    "    if i == 'is_EM':\n",
    "        #x['organism_name_uniref'] = x['uniref_func'].apply(lambda x: x.split(' Tax=')[1].split(' T')[0].strip() + ' (uniref annot)')\n",
    "        #x['organism_name_tox'] = x['bac_src'].apply(lambda x: x.split(' &')[0].strip() if type(x) != float else x)\n",
    "        #x['organism_name'] = x['organism_name_tox'].fillna(x['organism_name_uniref'])\n",
    "        x['organism_name'] = x['Organism_complete_name']\n",
    "        x['class'] = i\n",
    "        x = x[['peptide_name', 'organism_name', 'Protein name (uniref)', 'class']]\n",
    "        \n",
    "        concat.append(x)\n",
    "    if i == 'is_MPA':\n",
    "        #x['organism_name'] = x['bac_src'].apply(lambda x: x.split(' &')[0].strip() if type(x) != float else 'Unknown')\n",
    "        x['organism_name'] = x['Organism_complete_name']\n",
    "        x['class'] = i\n",
    "        x = x[['peptide_name', 'organism_name', 'Protein name (uniref)', 'class']]\n",
    "        \n",
    "        concat.append(x)\n",
    "    if i == 'is_patho':\n",
    "        #x['organism_name'] = x['bac_src'].apply(lambda x: x.split(' &')[0].strip() if type(x) != float else 'Unknown') \n",
    "        x['organism_name'] = x['Organism_complete_name']\n",
    "        x['class'] = i\n",
    "        x = x[['peptide_name', 'organism_name', 'Protein name (uniref)', 'class']]\n",
    "        \n",
    "        concat.append(x)\n",
    "total_species = pd.concat(concat)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Obtain a single dataframe for these values concatenating HLA, GWAS and total\n",
    "whole_df = []\n",
    "for i,group in zip([HLA_species, GWAS_species, total_species], ['HLA', 'GWAS tested', 'Entire lib']):\n",
    "    i['group'] = group\n",
    "    whole_df.append(i)\n",
    "whole_df = pd.concat(whole_df)\n",
    "\n",
    "# Obtain common names\n",
    "whole_df['genus_names'] = whole_df['organism_name'].apply(lambda x: x.split(' ')[0])\n",
    "whole_df['genus_names']\n",
    "whole_df[['genus_names', 'organism_name']].drop_duplicates().to_csv('Check_genus_species.csv', sep='\\t')\n",
    "tricky_names = ['Not found', 'Human gammaherpesvirus 4',\n",
    " 'Human herpesvirus 4 strain B95-8',\n",
    "  'Human rhinovirus A89',\n",
    "  'Human respiratory syncytial virus A2',\n",
    "  'Human alphaherpesvirus 1'] # Maybe grep with 'virus' in x and then do x.split(' ')[:1]\n",
    "dict_for_replacing = {}\n",
    "for x in  set(whole_df['organism_name']):\n",
    "    if 'Human' in x:\n",
    "        dict_for_replacing[x] = 'Human viruses'\n",
    "    if 'unclassified' in x or 'uncultured' in x:\n",
    "        dict_for_replacing[x] = x.split(' ')[1]\n",
    "    if 'bacterium' in x:\n",
    "        dict_for_replacing[x] = ' '.join(x.split(' ')[:2])\n",
    "    if 'Not found' in x:\n",
    "        dict_for_replacing[x] = x\n",
    "    if len(x.split(' ')) == 3 and 'uniref annot' in x and x != 'root' and x != 'Bacteria':\n",
    "        dict_for_replacing[x] = x.split(' ')[0] + ' bacterium'\n",
    "    else:\n",
    "        if 'Human' not in x and 'gut' not in x and 'uncultured' not in x and 'unclassified' not in x and 'cellular' not in x and 'environmental' not in x and 'Homo' not in x:\n",
    "            dict_for_replacing[x] = x.split(' ')[0]\n",
    "        elif 'uncultured' in x:\n",
    "            dict_for_replacing[x] = x.split(' ')[1]\n",
    "        elif 'unclassified' in x:\n",
    "            dict_for_replacing[x] = x.split(' ')[1]\n",
    "        elif 'Homo' in x:\n",
    "            dict_for_replacing[x] = x\n",
    "\n",
    "        #print(dict_for_replacing[x])\n",
    "whole_df['reformatted_name'] = whole_df['organism_name'].replace(dict_for_replacing, inplace=False)\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The values with counts < 2 % will be converted to Others, and they are 40 taxa\n",
      "The values with counts < 2 % will be converted to Others, and they are 0 taxa\n",
      "The values with counts < 2 % will be converted to Others, and they are 15 taxa\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/gabrielinnocenti/Desktop/PhD Wien/Data/Sergio_2022_PhIP-Seq/utils/stats_and_plot_utils.py:505: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  whole_df_filt['reformatted_name'].replace(dict_for_change, inplace=True)\n",
      "/Users/gabrielinnocenti/Desktop/PhD Wien/Data/Sergio_2022_PhIP-Seq/utils/stats_and_plot_utils.py:505: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  whole_df_filt['reformatted_name'].replace(dict_for_change, inplace=True)\n",
      "/Users/gabrielinnocenti/Desktop/PhD Wien/Data/Sergio_2022_PhIP-Seq/utils/stats_and_plot_utils.py:505: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  whole_df_filt['reformatted_name'].replace(dict_for_change, inplace=True)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The values with counts < 2 % will be converted to Others, and they are 133 taxa\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/gabrielinnocenti/Desktop/PhD Wien/Data/Sergio_2022_PhIP-Seq/utils/stats_and_plot_utils.py:505: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  whole_df_filt['reformatted_name'].replace(dict_for_change, inplace=True)\n",
      "/Users/gabrielinnocenti/Desktop/PhD Wien/Data/Sergio_2022_PhIP-Seq/utils/stats_and_plot_utils.py:505: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  whole_df_filt['reformatted_name'].replace(dict_for_change, inplace=True)\n",
      "/Users/gabrielinnocenti/Desktop/PhD Wien/Data/Sergio_2022_PhIP-Seq/utils/stats_and_plot_utils.py:505: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  whole_df_filt['reformatted_name'].replace(dict_for_change, inplace=True)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The values with counts < 2 % will be converted to Others, and they are 16 taxa\n",
      "The values with counts < 2 % will be converted to Others, and they are 9 taxa\n",
      "<matplotlib.colors.LinearSegmentedColormap object at 0x7ff73a7ed100>\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/gabrielinnocenti/Desktop/PhD Wien/Data/Sergio_2022_PhIP-Seq/utils/stats_and_plot_utils.py:566: UserWarning: FixedFormatter should only be used together with FixedLocator\n",
      "  ax.set_yticklabels(range(0,100,20), fontsize=12)\n",
      "/Users/gabrielinnocenti/Desktop/PhD Wien/Data/Sergio_2022_PhIP-Seq/utils/stats_and_plot_utils.py:566: UserWarning: FixedFormatter should only be used together with FixedLocator\n",
      "  ax.set_yticklabels(range(0,100,20), fontsize=12)\n",
      "/Users/gabrielinnocenti/Desktop/PhD Wien/Data/Sergio_2022_PhIP-Seq/utils/stats_and_plot_utils.py:566: UserWarning: FixedFormatter should only be used together with FixedLocator\n",
      "  ax.set_yticklabels(range(0,100,20), fontsize=12)\n",
      "/Users/gabrielinnocenti/Desktop/PhD Wien/Data/Sergio_2022_PhIP-Seq/utils/stats_and_plot_utils.py:566: UserWarning: FixedFormatter should only be used together with FixedLocator\n",
      "  ax.set_yticklabels(range(0,100,20), fontsize=12)\n",
      "/Users/gabrielinnocenti/Desktop/PhD Wien/Data/Sergio_2022_PhIP-Seq/utils/stats_and_plot_utils.py:566: UserWarning: FixedFormatter should only be used together with FixedLocator\n",
      "  ax.set_yticklabels(range(0,100,20), fontsize=12)\n",
      "/Users/gabrielinnocenti/Desktop/PhD Wien/Data/Sergio_2022_PhIP-Seq/utils/stats_and_plot_utils.py:566: UserWarning: FixedFormatter should only be used together with FixedLocator\n",
      "  ax.set_yticklabels(range(0,100,20), fontsize=12)\n"
     ]
    },
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 288x216 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 288x216 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 288x216 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 288x216 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 288x216 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 288x216 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "global groups\n",
    "groups  = ['is_infect', 'is_EBV',\n",
    "    'is_toxin', 'is_EM', 'is_MPA', 'is_patho']\n",
    "\n",
    "list_subsets, colormap = parse_and_plot_species(whole_df, groups) # This is with staphylococcus in Gut pathogens included. Removed it in the paper."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Analysis prevalence distributions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_not_HLA_agilent = df_agilent[(df_agilent['peptide_name'].isin(df['peptide']) == False) &\n",
    "                                (df_agilent['peptide_name'].isin(df2_2['peptide']))]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1934\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/var/folders/lx/dvbfjqsd7wq4sr2wbc_g52p40000gn/T/ipykernel_23673/3191238374.py:7: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  table_prevalences['Prevalence_IBD_tot'] = table_prevalences['Prevalence_IBD'].apply(lambda x: ((x*IBD_n)/n_tot))\n",
      "/var/folders/lx/dvbfjqsd7wq4sr2wbc_g52p40000gn/T/ipykernel_23673/3191238374.py:8: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  table_prevalences['Prevalence_LLD_tot'] = table_prevalences['Prevalence_LLD'].apply(lambda x: ((x*LLD_n)/n_tot))\n",
      "/var/folders/lx/dvbfjqsd7wq4sr2wbc_g52p40000gn/T/ipykernel_23673/3191238374.py:9: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  table_prevalences['Prevalence_tot'] = table_prevalences['Prevalence_IBD_tot'] + table_prevalences['Prevalence_LLD_tot']\n",
      "/var/folders/lx/dvbfjqsd7wq4sr2wbc_g52p40000gn/T/ipykernel_23673/3191238374.py:26: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  table_prevalences_agilent['Interval'] = table_prevalences_agilent['Prevalence_tot'].map(\n"
     ]
    }
   ],
   "source": [
    "table_prevalences= df_GWAS\n",
    "table_prevalences = table_prevalences[['Peptide', 'Prevalence_IBD', 'Prevalence_LLD']]\n",
    "LLD_n = 1437 # As specified in the results first paragraph\n",
    "IBD_n = 497 # As specified in the results first paragraph\n",
    "n_tot = LLD_n + IBD_n\n",
    "print(n_tot)\n",
    "table_prevalences['Prevalence_IBD_tot'] = table_prevalences['Prevalence_IBD'].apply(lambda x: ((x*IBD_n)/n_tot))\n",
    "table_prevalences['Prevalence_LLD_tot'] = table_prevalences['Prevalence_LLD'].apply(lambda x: ((x*LLD_n)/n_tot))\n",
    "table_prevalences['Prevalence_tot'] = table_prevalences['Prevalence_IBD_tot'] + table_prevalences['Prevalence_LLD_tot']\n",
    "\n",
    "# Only agilent\n",
    "table_prevalences_agilent = table_prevalences[table_prevalences['Peptide'].str.contains('agilent')]\n",
    "\n",
    "np.quantile(table_prevalences_agilent['Prevalence_tot'], 0.90)\n",
    "\n",
    "intervals = [(0,0.1), (0.1,0.2), (0.2,0.5), (0.5,1)]\n",
    "labels = (\"1\", \"2\", \"3\", \"4\")\n",
    "\n",
    "# Function to map prevalence values to intervals. #TODO: Include it in add_features script\n",
    "def map_interval(val):\n",
    "    for i, interval in enumerate(intervals):\n",
    "        if interval[0] <= val < interval[1]:\n",
    "            return labels[i]\n",
    "    return None\n",
    "\n",
    "table_prevalences_agilent['Interval'] = table_prevalences_agilent['Prevalence_tot'].map(\n",
    "    map_interval\n",
    "    )\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "HLA_prevalences_table = pd.merge(df_agilent_final[['peptide_name', 'prot_num']],\n",
    "                          table_prevalences_agilent,\n",
    "                          left_on='peptide_name',\n",
    "                          right_on='Peptide')\n",
    "non_HLA_associated_prevalences = pd.merge(df_not_HLA_agilent[['peptide_name', 'prot_num']],\n",
    "                          table_prevalences_agilent,\n",
    "                          left_on='peptide_name',\n",
    "                          right_on='Peptide')\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Compute Kolmogorov Smirnov test over the 3 prevalence distributions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "import scipy.stats as stats\n",
    "import math"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test statistic: 0.21975007046885275\n",
      "P-value: 5.36580633568276e-12\n"
     ]
    }
   ],
   "source": [
    "# Perform the Kolmogorov-Smirnov test\n",
    "statistic, p_value = stats.ks_2samp(table_prevalences_agilent['Prevalence_tot'],\n",
    "                                    HLA_prevalences_table['Prevalence_tot'])\n",
    "\n",
    "# Print the test statistic and p-value\n",
    "print(\"Test statistic:\", statistic)\n",
    "print(\"P-value:\", p_value)\n",
    "\n",
    "\n",
    "# Perform the Kolmogorov-Smirnov test for each pair of populations\n",
    "statistic12, p_value12 = stats.ks_2samp(table_prevalences_agilent['Prevalence_tot'],\n",
    "                                    HLA_prevalences_table['Prevalence_tot'])\n",
    "statistic13, p_value13 = stats.ks_2samp(HLA_prevalences_table['Prevalence_tot'],\n",
    "                                    non_HLA_associated_prevalences['Prevalence_tot'])\n",
    "statistic23, p_value23 = stats.ks_2samp(non_HLA_associated_prevalences['Prevalence_tot'],\n",
    "                                    table_prevalences_agilent['Prevalence_tot'])\n",
    "\n",
    "# Create a list of the test statistics and p-values\n",
    "statistics = [statistic12, statistic13, statistic23]\n",
    "p_values = [p_value12, p_value13, p_value23]\n",
    "labels = ['total antibody bound', 'HLA', 'non_HLA'] \n",
    "\n",
    "# compare them using boxplots\n",
    "import seaborn as sns\n",
    "#plt.figure(figsize=(15,10))\n",
    "table_distributions = pd.DataFrame({'peptides' : table_prevalences_agilent['Peptide'], 'HLA associations tested' : table_prevalences_agilent['Prevalence_tot'],\n",
    "              'HLA associations found (by imputation)' : HLA_prevalences_table['Prevalence_tot'], \n",
    "              'HLA associations not found' : non_HLA_associated_prevalences['Prevalence_tot']})\n",
    "\n",
    "# Create a long format table using the melt function\n",
    "melted_table_distributions = table_distributions.melt(id_vars=['peptides'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Count of Peptides')"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 864x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(12,8))\n",
    "\n",
    "# Use seaborn to plot the histograms\n",
    "sns.histplot(data=melted_table_distributions, x=melted_table_distributions[\n",
    "    melted_table_distributions['variable'] == 'HLA associations found (by imputation)']['value'], bins=100, kde=True, color='blue',\n",
    "    alpha=0.5, label='HLA')\n",
    "sns.histplot(data=melted_table_distributions, x=melted_table_distributions[\n",
    "    melted_table_distributions['variable'] == 'HLA associations tested']['value'], bins=100, kde=True, color='green',\n",
    "    alpha=0.5, label='Antibody bound')\n",
    "#plt.axvline(x=3, color='red', linestyle='--')\n",
    "\n",
    "plt.axvline(x=np.mean(table_prevalences_agilent['Prevalence_tot']), color='green', linestyle='--')\n",
    "plt.axvline(x=np.mean(HLA_prevalences_table['Prevalence_tot']), color='blue', linestyle='--')\n",
    "plt.annotate('Mean(antibody\\nbound)', xy=(np.mean(table_prevalences_agilent['Prevalence_tot']),190), xytext=(np.mean(table_prevalences_agilent['Prevalence_tot'])-.12, 225),\n",
    "             arrowprops=dict(arrowstyle='->'))\n",
    "plt.annotate('Mean(HLA)', xy=(np.mean(HLA_prevalences_table['Prevalence_tot']),150), xytext=(np.mean(table_prevalences_agilent['Prevalence_tot'])+.08, 180),\n",
    "             arrowprops=dict(arrowstyle='->'))\n",
    "plt.legend(fontsize=12)\n",
    "plt.xlabel('Fraction of Total individuals')\n",
    "plt.ylabel('Count of Peptides')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "from utils.stats_and_plot_utils import barplot_annotate_brackets"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5.36580633568276e-12\n",
      "4.104538593220016e-10\n",
      "0.01564683570271228\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Fraction of population')"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1080x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots(figsize=(15,10))\n",
    "sns.violinplot(data=melted_table_distributions, x='variable',\n",
    "            y='value')\n",
    "\n",
    "\n",
    "count = 0\n",
    "maximum = 0\n",
    "\n",
    "#print(ax)\n",
    "#print(f\"ax patches are: {[x for x in ax.patches]}\")\n",
    "for rect in ax.patches:\n",
    "    #print(rect)\n",
    "    if np.isnan(rect.get_height()) == False:\n",
    "        #print(count)\n",
    "        #print(rect.get_height(), values[count], sep='\\t')\n",
    "        if rect.get_height() > maximum:\n",
    "            maximum = rect.get_height()\n",
    "            maximum = maximum\n",
    "   #print(rect)\n",
    "maximum = maximum/10 + 1\n",
    "\n",
    "heights=[1.50, 1.25, 1]\n",
    "bars = np.arange(len(heights))\n",
    "for i in range(3):\n",
    "    print(p_values[i])\n",
    "barplot_annotate_brackets(0, 1, p_values[0], bars, heights, maxasterix=3, fs=15)\n",
    "barplot_annotate_brackets(1, 2, p_values[1], bars, heights, maxasterix=3, fs=15)\n",
    "barplot_annotate_brackets(0, 2, p_values[2], bars, heights, maxasterix=3, fs=15)\n",
    "plt.grid()\n",
    "plt.xticks(fontsize=15)\n",
    "plt.xlabel('')\n",
    "plt.ylabel('Fraction of population', fontsize=15)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Use alleles information and plot alleles distribution in the different categories"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "from utils.stats_and_plot_utils import chi_squared_test_groups_alleles\n",
    "from statsmodels.stats.multitest import multipletests"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/var/folders/lx/dvbfjqsd7wq4sr2wbc_g52p40000gn/T/ipykernel_23673/3598546405.py:18: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  df_merged_assoc_gene_HLAII['allele'] = df_merged_assoc_gene_HLAII[['Variant']].apply(lambda x: ['_'.join(y.split('_')[1:]) for y in x])\n",
      "/var/folders/lx/dvbfjqsd7wq4sr2wbc_g52p40000gn/T/ipykernel_23673/3598546405.py:40: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  selected_functions['allele'] = df_merged_assoc_gene_HLAII['allele']\n",
      "/var/folders/lx/dvbfjqsd7wq4sr2wbc_g52p40000gn/T/ipykernel_23673/3598546405.py:52: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  selected_functions_sources['Microbiome'] = selected_functions_sources['is_EM'] + selected_functions_sources['is_MPA']\n",
      "/var/folders/lx/dvbfjqsd7wq4sr2wbc_g52p40000gn/T/ipykernel_23673/3598546405.py:54: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  selected_functions_sources['IEBD_EBV_auto'] = selected_functions_sources['is_EBV'] +\\\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(812, 21)\n",
      "(405, 21)\n",
      "405\n",
      "['mediumseagreen', 'gold', 'lightsalmon', 'thistle', 'indianred', 'tab:blue']\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1008x504 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "df_assoc_reduced = df[['Variant', 'peptide', 'Bonferroni_ind']]\n",
    "\n",
    "df_merged_assoc = pd.merge(df_assoc_reduced, df_agilent_final, left_on='peptide', right_on='peptide_name')[[\n",
    "    'Variant',\n",
    "    'peptide',\n",
    "    'Bonferroni_ind',\n",
    "    'is_pos_cntrl', 'is_neg_cntrl',\n",
    "    'is_rand_cntrl', 'is_auto', 'is_infect', 'is_EBV',\n",
    "    'is_toxin', 'is_EM', 'is_MPA', 'is_patho', 'is_IgA', 'is_probio',\n",
    "    'signalp6_slow', \n",
    "    'diamond_mmseqs_intersec_toxin',\n",
    "    'is_flagellum',\n",
    "    'uniref_func',\n",
    "    'is_topgraph_new_&_old'\n",
    "]]\n",
    "df_merged_assoc_gene_HLAII = df_merged_assoc[(df_merged_assoc['Variant'].str.contains('_')) & \n",
    "                (df_merged_assoc['Variant'].str.contains('HLA'))]\n",
    "df_merged_assoc_gene_HLAII['allele'] = df_merged_assoc_gene_HLAII[['Variant']].apply(lambda x: ['_'.join(y.split('_')[1:]) for y in x])\n",
    "# df_merged_assoc_gene['allele'] = df_merged_assoc_gene[['allele']].apply(lambda x: '_'.join(x)\n",
    "# Select ony specific alleles\n",
    "print(df_merged_assoc_gene_HLAII.shape)\n",
    "df_merged_assoc_gene_HLAII = df_merged_assoc_gene_HLAII[df_merged_assoc_gene_HLAII['allele'].str.len() > 7]\n",
    "print(df_merged_assoc_gene_HLAII.shape)\n",
    "counts_known_allele = df_merged_assoc_gene_HLAII.groupby(['peptide', 'allele']).count()[['Variant']]\n",
    "\n",
    "counts_known_allele_wide = counts_known_allele.unstack().fillna(0)\n",
    "# Remove the first level in columns ('Variant')\n",
    "counts_known_allele_wide.columns = counts_known_allele_wide.columns.droplevel(0)\n",
    "counts_known_allele_wide.index.name = None\n",
    "counts_known_allele_wide.columns.name = None\n",
    "counts_known_allele_wide\n",
    "\n",
    "# Rearrange the dataframe in order to contain clear peptide assignment to each group:\n",
    "# NOT MANDATORY:\n",
    "# Rearrange the dataframe in order to contain clear peptide assignment to each group:\n",
    "# NOT MANDATORY:\n",
    "# Reassign sources in order to avoid overlaps of a single peptide in more than 1 categories\n",
    "excluded_columns = [0, 2, 19, 20]\n",
    "selected_functions = df_merged_assoc_gene_HLAII.iloc[:, [i for i in range(df.shape[1]) if i not in excluded_columns]]\n",
    "selected_functions['allele'] = df_merged_assoc_gene_HLAII['allele']\n",
    "#print([df_merged_assoc_selected.columns[i] for i in range(df_merged_assoc_selected.shape[1])])\n",
    "# First I only selected the sources\n",
    "selected_functions_sources = selected_functions[['peptide', 'is_auto', 'is_infect', 'is_EBV',\n",
    "    'is_toxin', 'is_EM', 'is_MPA', 'is_patho', 'is_IgA', 'is_probio', 'allele']]\n",
    "# plot_upset(selected_functions_sources,\n",
    "#             selected_functions_sources[['is_auto', 'is_infect', 'is_EBV',\n",
    "#     'is_toxin', 'is_EM', 'is_MPA', 'is_patho', 'is_IgA', 'is_probio']])\n",
    "# plt.savefig('Analysis_flagellum_peptides_CFS/PCA/overlaps_categories_sources1.png',facecolor='white',\n",
    "#             transparent=False,\n",
    "#             bbox_inches = 'tight')\n",
    "\n",
    "selected_functions_sources['Microbiome'] = selected_functions_sources['is_EM'] + selected_functions_sources['is_MPA']\n",
    "\n",
    "selected_functions_sources['IEBD_EBV_auto'] = selected_functions_sources['is_EBV'] +\\\n",
    "    selected_functions_sources['is_auto'] +\\\n",
    "    selected_functions_sources['is_infect']\n",
    "\n",
    "selected_functions_collapsed = selected_functions_sources[['peptide', 'is_toxin', 'is_patho', 'is_IgA', 'is_probio', 'Microbiome', 'IEBD_EBV_auto', 'allele']]\n",
    "\n",
    "# plot_upset(selected_functions_collapsed,\n",
    "#             selected_functions_collapsed[['is_toxin', 'is_patho', 'is_IgA', 'is_probio', 'Microbiome', 'IEBD_EBV_auto']])\n",
    "\n",
    "# Do the same but with alleles on x and categories in the bars\n",
    "\n",
    "series_prevalences= []\n",
    "series_counts = []\n",
    "nassoc = []\n",
    "\n",
    "# groups = set(selected_functions_collapsed['allele'])\n",
    "groups = ['is_toxin', 'is_patho', 'is_IgA', 'is_probio', 'Microbiome', 'IEBD_EBV_auto']\n",
    "\n",
    "for i in groups:\n",
    "    df_merged_assoc_known_allele_reduced = selected_functions_collapsed[selected_functions_collapsed[i] == 1]\n",
    "    #nassoc.append(len(df_merged_assoc_known_allele_reduced))\n",
    "    #print(nassoc)\n",
    "    #print(i, len(df_merged_assoc_known_allele))\n",
    "    # Group By the peptide and the allele\n",
    "    counts_known_allele = df_merged_assoc_known_allele_reduced.groupby(['allele', 'peptide']).count().iloc[:,0]\n",
    "    #nassoc.append(len(counts_known_allele))\n",
    "    # Unstack to make table in wide format and replace nan values with 0\n",
    "    counts_known_allele_wide = counts_known_allele.unstack().fillna(0)\n",
    "    counts_known_allele_wide.columns.name = None\n",
    "    counts_known_allele_wide.index.name = None\n",
    "    series_counts.append(counts_known_allele_wide.sum(axis=1))\n",
    "#concat_perc_allele = pd.concat(series_prevalences, axis=1).fillna(0)\n",
    "concat_count_allele = pd.concat(series_counts, axis=1).fillna(0)\n",
    "#concat_count_allele[]\n",
    "rowsums = concat_count_allele.sum(axis=1)\n",
    "\n",
    "concat_perc_allele = (concat_count_allele.div(rowsums,axis=0)*100).round(3)\n",
    "#print(concat_count_allele)\n",
    "#concat_count_allele = concat_count_allele.transpose()\n",
    "concat_perc_allele.columns =  concat_count_allele.columns = ['is_toxin', 'is_patho', 'is_IgA', 'is_probio', 'Microbiome', 'IEBD_EBV_auto']\n",
    "\n",
    "concat_perc_allele.index = [x+'\\n(n='+str(int(y))+')' for x,y in zip(concat_perc_allele.index,\n",
    "                                                    rowsums)]\n",
    "\n",
    "print(len(selected_functions_collapsed))\n",
    "# Statistic test\n",
    "grouped_concat, grouped_concat_perc, chi2_test = chi_squared_test_groups_alleles(selected_functions_collapsed, by='allele', groups=\n",
    "                                                                         ['is_toxin', 'is_patho', 'is_IgA', 'is_probio', 'Microbiome', 'IEBD_EBV_auto'], save='',\n",
    "                                                                         statistic=True)\n",
    "grouped_concat_perc.columns = ['VFDB', 'Gut Pathogens', 'Antibody-coated strains', 'Probiotics', 'Microbiome', 'IEDB']\n",
    "from matplotlib import cm\n",
    "plt.style.use('seaborn-whitegrid')\n",
    "\n",
    "cmap_dict =  {\n",
    "'IEDB': 'tab:blue',\n",
    "'VFDB': 'lightsalmon',\n",
    "'Microbiome': 'mediumseagreen',\n",
    "'Gut Pathogens': 'thistle',\n",
    "'Antibody-coated strains' : 'indianred',\n",
    "'Probiotics' : 'gold'} \n",
    "\n",
    "\n",
    "#cmap = cm.get_cmap('tab20')\n",
    "from matplotlib.colors import ListedColormap\n",
    "cimap = ListedColormap([cmap_dict[c] for c in grouped_concat_perc.columns])\n",
    "print([cmap_dict[c] for c in set(grouped_concat_perc.columns)])\n",
    "fig, ax = plt.subplots(1, figsize=(14,7))\n",
    "p = grouped_concat_perc.plot(kind='bar', stacked=True,\\\n",
    "    ax=ax, edgecolor='grey', cmap=cimap, alpha=.9)\n",
    "ax.grid(False)\n",
    "# # Highlight just the ones which are Microbiota (mach index 4) or Antibody-coated strains (match index 2)\n",
    "# print(grouped_concat_perc.columns)\n",
    "# list_values_to_reduce_alpha = []\n",
    "# c1 = 0\n",
    "# for k in grouped_concat_perc.values:\n",
    "#     no_zeros = np.where(k!=0)\n",
    "#     print(no_zeros[0])\n",
    "#     for i in no_zeros[0]:\n",
    "#         if i == 2:\n",
    "#             print(no_zeros[0], 'matched', c1+2)\n",
    "#             list_values_to_reduce_alpha.append(c1+2)\n",
    "#         if i == 4:\n",
    "#             print(no_zeros[0], 'matched', c1+4)\n",
    "#             list_values_to_reduce_alpha.append(c1+4)\n",
    "#     #print(len(no_zeros))\n",
    "#     c1 += len(no_zeros[0])\n",
    "#print(list_values_to_reduce_alpha)\n",
    "\n",
    "ax.set_ylim(0,100)\n",
    "ax.legend('')\n",
    "ax.set_ylabel('Relative Fraction (%)')\n",
    "ax.set_xlabel('Alleles')\n",
    "ax.legend(bbox_to_anchor=(0.5, 1.15), fontsize=12, loc='upper center', ncol=3)\n",
    "plt.savefig('SupplemeStacked_barplot_all_genes_hierarchical.png', facecolor='white',\\\n",
    "    dpi=300,\n",
    "        transparent=False,\n",
    "        bbox_inches = 'tight')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Show Manhattan plot"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['DQA1', 'DQA1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQA1', 'DQA1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQB1', 'DRB1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DRB1', 'DRB1', 'DQB1', 'DRB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQA1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQB1', 'DRB1', 'DRB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'B', 'DPB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DPB1', 'DQA1', 'DQB1', 'DPB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DQB1', 'DQB1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DQB1', 'DRB1', 'DQB1', 'DRB1', 'DRB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DRB1', 'DRB1', 'DQA1', 'DQB1', 'DRB1', 'DQA1', 'DQB1', 'DRB1', 'DRB1', 'DQA1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DQB1', 'DRB1', 'DRB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DPA1', 'DPA1', 'DPA1', 'DPA1', 'DPA1', 'DPA1', 'DPA1', 'DPB1', 'DPB1', 'DPB1', 'DPB1', 'DPB1', 'DQA1', 'DQA1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DPA1', 'DQA1', 'DQB1', 'DRB1', 'DRB1', 'DPA1', 'DPA1', 'DPA1', 'DPA1', 'DPA1', 'DPA1', 'DPA1', 'DPA1', 'DPA1', 'DPA1', 'DPA1', 'DPA1', 'DPA1', 'DPA1', 'DPA1', 'DPB1', 'DPB1', 'DPB1', 'DPB1', 'DPB1', 'DPB1', 'DPB1', 'DPB1', 'DPB1', 'DPB1', 'DPB1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DQB1', 'DQB1', 'DQA1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQB1', 'DRB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQB1', 'DRB1', 'DRB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQB1', 'DQB1', 'DRB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'B', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DQB1', 'DRB1', 'DRB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQB1', 'DQA1', 'DQA1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQB1', 'DRB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'B', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'B', 'B', 'DQA1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'B', 'B', 'B', 'B', 'B', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQB1', 'DRB1', 'DRB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'C', 'C', 'B', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DQB1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQB1', 'DRB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DQB1', 'DRB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQB1', 'DRB1', 'DRB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DQA1', 'DQB1', 'DQB1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQA1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQB1', 'DRB1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQB1', 'DRB1', 'DRB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'B', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQB1', 'DRB1', 'DRB1', 'B', 'B', 'B', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQB1', 'DRB1', 'DQB1', 'DRB1', 'B', 'B', 'B', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DRB1', 'DRB1', 'B', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQB1', 'DRB1', 'DRB1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQB1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'C', 'C', 'C', 'C', 'DRB1', 'DRB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'B', 'C', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'B', 'B', 'C', 'DQB1', 'DRB1', 'DRB1', 'B', 'B', 'B', 'B', 'C', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', '6', '6', '6', '6', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'C', 'DPB1', 'DPB1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'A', 'A', 'B', 'B', 'C', 'DPB1', 'DPB1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'C', 'DPB1', 'DPB1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', '6', '6', 'A', 'A', 'A', 'A', 'A', 'A', 'B', 'B', 'B', 'B', 'C', 'DPB1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'A', 'A', 'B', 'B', 'C', 'DPB1', 'DPB1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'C', 'DPB1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DQB1', 'DRB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', '6', '6', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'B', 'B', 'B', 'B', 'B', 'B', 'C', 'DPB1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'A', 'A', 'B', 'B', 'C', 'DPB1', 'DPB1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'C', 'DPB1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQB1', 'DRB1', 'DRB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'B', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'B', 'B', 'DQB1', 'DRB1', 'DRB1', 'B', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DRB1', 'DQA1', 'DQA1', 'DRB1', 'DQA1', 'B', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'B', 'B', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'B', 'B', 'B', 'B', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'B', 'B', 'C', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'A', 'A', 'B', 'B', 'C', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'C', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DRB1', 'DRB1', 'DRB1', '6', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'B', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'A', 'A', 'B', 'B', 'DQA1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'B', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DRB1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DRB1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQB1', 'DQB1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'B', 'C', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'B', 'B', 'C', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'B', 'B', 'B', 'B', 'B', 'C', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQB1', 'B', 'DQB1', 'DQA1', 'DQB1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', '6', '6', '6', 'A', 'A', 'A', 'A', 'B', 'B', 'B', 'B', 'B', 'B', 'C', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'B', 'B', 'C', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'A', 'A', 'A', 'A', 'B', 'B', 'B', 'B', 'B', 'B', 'C', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', '6', 'A', 'A', 'A', 'A', 'A', 'A', 'DPA1', 'DPA1', 'DPA1', 'DPA1', 'DPA1', 'DPA1', 'DPA1', 'DPB1', 'DPB1', 'DPB1', 'DPB1', 'DPB1', 'DPB1', 'DPB1', 'DPB1', 'DPB1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'A', 'A', 'DPA1', 'DPA1', 'DPB1', 'DPB1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'B', 'DPA1', 'DPA1', 'DPA1', 'DPA1', 'DPA1', 'DPA1', 'DPA1', 'DPA1', 'DPA1', 'DPA1', 'DPA1', 'DPA1', 'DPA1', 'DPA1', 'DPA1', 'DPA1', 'DPB1', 'DPB1', 'DPB1', 'DPB1', 'DPB1', 'DPB1', 'DPB1', 'DPB1', 'DPB1', 'DPB1', 'DPB1', 'DPB1', 'DPB1', 'DPB1', 'DPB1', 'DPB1', 'DPB1', 'DPB1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'B', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'B', 'B', 'C', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'B', 'B', 'B', 'B', 'B', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQB1', 'DRB1', 'DRB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'B', 'C', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'B', 'B', 'C', 'DQB1', 'DRB1', 'DRB1', 'B', 'B', 'B', 'B', 'B', 'C', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'B', 'C', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'B', 'B', 'C', 'DQA1', 'DQA1', 'DQB1', 'DRB1', 'DRB1', 'B', 'B', 'B', 'B', 'C', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'B', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'B', 'B', 'C', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'B', 'B', 'B', 'B', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DPB1', 'DPB1', 'DPB1', 'DQA1', 'DQA1', 'DPB1', 'DPB1', 'DPB1', 'DPB1', 'DPB1', 'DPB1', 'DPB1', 'DPB1', 'DPB1', 'DPB1', 'DPB1', 'DPB1', 'DPB1', 'DPB1', 'DPB1', 'DPB1', 'DPB1', 'DPB1', 'DPB1', 'DPB1', 'DPB1', 'DPB1', 'DPB1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQA1', 'DQB1', 'DQB1', 'DRB1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'A', 'A', 'A', 'A', 'DRB1', 'DPB1', 'DPB1', 'DPB1', 'DPB1', 'DPB1', 'DPB1', 'DPB1', 'DPB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQB1', 'DRB1', 'DRB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DRB1', 'DQA1', 'DQA1', 'B', 'B', 'DQA1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQA1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', '6', '6', '6', '6', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'C', 'C', 'DPB1', 'DPB1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'A', 'A', 'B', 'B', 'B', 'B', 'C', 'C', 'DPB1', 'DPB1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'C', 'C', 'C', 'C', 'C', 'DPB1', 'DPB1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'A', 'C', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'C', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'A', 'C', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DRB1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DQA1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', '6', '6', '6', '6', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'C', 'C', 'DPB1', 'DPB1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'A', 'A', 'B', 'B', 'C', 'DPB1', 'DPB1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'C', 'C', 'C', 'C', 'DPB1', 'DPB1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQB1', 'DRB1', 'DRB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'B', 'DRB1', 'DRB1', 'DRB1', 'B', 'B', 'DQB1', 'DRB1', 'DRB1', 'B', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DRB1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DRB1', 'DQB1', 'DRB1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DQB1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQB1', 'DRB1', 'DRB1', 'DQA1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQB1', 'DRB1', 'DRB1', 'DQA1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQB1', 'DRB1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQB1', 'DQA1', 'DQB1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DRB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DQB1', 'DRB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'B', 'B', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'B', 'B', 'C', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQA1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQB1', 'DQB1', 'DRB1', 'DQB1', 'DQB1', 'DRB1', 'DQB1', 'DQB1', 'DRB1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQB1', 'DRB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQB1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'C', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'B', 'B', 'C', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'C', 'C', 'C', 'C', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'B', 'B', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'B', 'B', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'B', 'B', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQB1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DQA1', 'DQB1', 'DQB1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQB1', 'DQB1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'B', 'B', 'C', 'C', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DQB1', 'DRB1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQB1', 'DRB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', '6', '6', '6', '6', '6', '6', '6', 'A', 'A', 'A', 'A', 'A', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'C', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'B', 'B', 'C', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'B', 'B', 'B', 'B', 'C', 'C', 'C', 'C', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQA1', 'DQA1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQB1', 'DRB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'B', 'B', 'DQA1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQB1', 'DRB1', 'DRB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQB1', 'DRB1', 'DRB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQB1', 'DRB1', 'DRB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DRB1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DRB1', 'DRB1', 'B', 'B', 'B', 'B', 'B', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'B', 'B', 'DQA1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'B', 'B', 'B', 'B', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'B', 'B', 'DQA1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'B', 'B', 'B', 'B', 'B', 'B', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'B', 'DQA1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'B', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQB1', 'DRB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', '6', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'B', 'B', 'B', 'C', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'C', 'DQA1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'C', 'C', 'C', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQB1', 'DQB1', 'DRB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQA1', 'DQA1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQA1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQB1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'B', 'B', 'B', 'B', 'B', 'B', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'DQB1', 'DPB1', 'DPB1', 'DPB1', 'DPB1', 'DPB1', 'DRB1', 'DRB1', 'DPB1', 'DPB1', 'DQB1', 'DRB1', 'DRB1', 'DPB1', 'DPB1', 'DPB1', 'DPB1', 'DPB1', 'DPB1', 'DPB1', 'DPB1', 'DPB1', 'DPB1', 'DPB1', 'DPB1', 'DPB1', 'DRB1', 'DRB1', 'DRB1', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'C', 'DQA1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'B', 'B', 'C', 'DQA1', 'DQB1', 'DRB1', 'DRB1', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'C', 'C', 'C', 'C', 'DQA1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQB1', 'DRB1', 'DRB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DQB1', 'DQB1', 'DRB1', 'DQB1', 'DQA1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'A', 'DQB1', 'DQB1', 'A', 'DQB1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DQB1', 'DQB1', 'B', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'B', 'B', 'C', 'C', 'C', 'C', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'C', 'C', 'C', 'C', 'C', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'B', 'DRB1', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'DRB1', 'DRB1', 'DRB1', 'B', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'B', 'B', 'C', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'B', 'B', 'B', 'B', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQB1', 'DRB1', 'DRB1', 'B', 'B', 'B', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQA1', 'DQB1', 'DQB1', 'DRB1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'B', 'B', 'B', 'DQA1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'C', 'DQA1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'B', 'B', 'C', 'DQA1', 'DQB1', 'DRB1', 'DRB1', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'C', 'C', 'C', 'DQA1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQA1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DRB1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'B', 'B', 'B', 'B', 'C', 'DQA1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'B', 'B', 'C', 'DQA1', 'DQB1', 'DRB1', 'DRB1', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'C', 'C', 'C', 'C', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQB1', 'DRB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DRB1', 'DRB1', 'DQA1', 'DQB1', 'DRB1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DQB1', 'DQA1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DRB1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'B', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'B', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'B', 'B', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'B', 'B', 'B', 'B', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DRB1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQA1', 'DQA1', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DRB1', 'B', 'B', 'B', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'B', 'B', 'B', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DQB1', 'DQB1', 'DRB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'B', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DQA1', 'DQA1', 'DQB1', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQB1', 'DRB1', 'DQA1', 'DQB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DRB1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQA1', 'DQA1', 'DQA1', 'DRB1', 'DRB1', 'DRB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'B', 'B', 'B', 'C', 'B', 'B', 'B', 'B', 'DQA1', 'DQA1', 'DQA1', 'DRB1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQB1', 'DRB1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'C', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'B', 'B', 'C', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'C', 'C', 'C', 'C', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQB1', 'DQA1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQA1', 'DQA1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQA1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQA1', 'DQA1', 'DQB1', 'DQA1', 'DQB1', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'B', 'B', 'C', 'C', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQB1', 'DRB1', 'DRB1', 'B', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQA1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DQB1', 'DQB1', 'DRB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DQB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DRB1', 'DQB1', 'DQB1']\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/var/folders/lx/dvbfjqsd7wq4sr2wbc_g52p40000gn/T/ipykernel_23673/3488974247.py:11: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  df_selected['neg_log_p'] = -np.log10(df_selected['P'])\n",
      "/var/folders/lx/dvbfjqsd7wq4sr2wbc_g52p40000gn/T/ipykernel_23673/3488974247.py:26: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  GWAS_df['CHR'] = GWAS_df['MarkerName'].apply(lambda x: int(x.split(':')[0]))\n",
      "/var/folders/lx/dvbfjqsd7wq4sr2wbc_g52p40000gn/T/ipykernel_23673/3488974247.py:27: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  GWAS_df['BP'] = GWAS_df['MarkerName'].apply(lambda x: int(x.split(':')[1]))\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x7ff6b9600850>"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 864x360 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "df_HLA = df[(df['Variant'].str.contains('_'))]\n",
    "HLA_index = df[(df['Variant'].str.contains('_'))].index\n",
    "list_HLA_allele = df_HLA[['Variant']].apply(lambda x: [y.split('_')[1] for y in x])['Variant'].tolist()\n",
    "df['allele'] = np.nan\n",
    "print(list_HLA_allele)\n",
    "df.loc[HLA_index,'allele'] = list_HLA_allele\n",
    "df['allele'] = df.loc[HLA_index,'allele']\n",
    "df['allele'] = df.allele.fillna('others')\n",
    "\n",
    "df_selected = df[['BP', 'allele', 'P']]\n",
    "df_selected['neg_log_p'] = -np.log10(df_selected['P'])\n",
    "df_selected_sorted = df_selected.sort_values(by='allele', ascending=False)\n",
    "\n",
    "\n",
    "GWAS_df = df2_2[['MarkerName', 'P.value']]\n",
    "GWAS_df.columns = ['MarkerName', 'P.value']\n",
    "#GWAS_df.to_csv('significative_df.tsv', sep='\\t')\n",
    "\n",
    "#GWAS_df = GWAS_df[GWAS_df['P.value'] < 0.8]\n",
    "\n",
    "# Use pyspark session\n",
    "#import pyspark_function\n",
    "#file_path = os.getcwd() + '/gwas_header.tsv'\n",
    "#print(file_path)\n",
    "#GWAS_df = pyspark_function.process_table(file_path, columns)\n",
    "GWAS_df['CHR'] = GWAS_df['MarkerName'].apply(lambda x: int(x.split(':')[0]))\n",
    "GWAS_df['BP'] = GWAS_df['MarkerName'].apply(lambda x: int(x.split(':')[1]))\n",
    "\n",
    "\n",
    "merged_imputat_assoc = pd.merge(GWAS_df[GWAS_df['CHR'] == 6], df_selected_sorted, on='BP', how='left')\n",
    "merged_imputat_assoc['allele'] = merged_imputat_assoc['allele'].fillna('others')\n",
    "\n",
    "merged_imputat_assoc['neg_log_pvalue'] = -np.log10(merged_imputat_assoc['P.value'])\n",
    "\n",
    "\n",
    "list_alleles = ['DRB1', 'DQB1', 'DQA1', 'DPB1', 'DPA1', 'A','B', 'C']\n",
    "cmap = cm.get_cmap('tab20')\n",
    "#colors = [cmap(i / len(list_alleles)) for i in range(len(list_alleles))]\n",
    "plt.figure(figsize=(12,5))\n",
    "# Create a dictionary to map categories to colors\n",
    "#category_color_map = dict(zip(list_alleles, colors))\n",
    "col_map= {'DRB1':'tab:red', 'DQB1':'tab:green', 'DQA1':'tab:blue', 'DPB1':'tab:purple', 'DPA1':'tab:cyan', 'A':'gold','B':'tab:orange', 'C':'tab:pink'}\n",
    "merged_imputat_assoc[merged_imputat_assoc['allele'] == 'others']['neg_log_pvalue']\n",
    "plt.scatter(x=merged_imputat_assoc[merged_imputat_assoc['allele'] == 'others']['BP'], y=merged_imputat_assoc[merged_imputat_assoc['allele'] == 'others']['neg_log_pvalue'], color='#DDDDDD', s=3)\n",
    "for i in list_alleles:\n",
    "    plt.scatter(x=merged_imputat_assoc[merged_imputat_assoc['allele'] == i]['BP'], y=merged_imputat_assoc[merged_imputat_assoc['allele'] == i]['neg_log_pvalue'], s=6, color=col_map[i], label=i)\n",
    "plt.legend()\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 0, 'Chromosome 6 (Mbp)')"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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69fLQ4cOlQ8fPiz7/X557Nix8uzZs2W/3y8XFxfLZ599tuz3++V169bJU6dOlevq6mRZluWlS5fKM2bMkGVZlkeNGqUUtvrnP/8pv/jii7Isy/K1114r//nPf5ZlWZbdbrdcUFAgb926Vf7xxx/l/v37yzt37pRlWZbnzZsnjxgxQv75559lj8cjX3zxxfLu3bvl48ePy2PGjJF//PFHWZZl+ejRo/Ill1wiV1RUqO7D3r175ZEjR8ovvfSSPHXqVHnSpEmq4mUss2fPltevX6/8fd1118nvvfeePH78eOX+FBUVyYsXL5Z/97vfyX/6059kWZblESNGyPPnz1fGceGFF8rfffed/Mknn8gDBw6UP//8c1mWZfmtt96SJ02apBz/559/lgcPHiw3NDQYfpeC9ocw6QhihsViQSAQCLnd6NGjkZKSAqvVin79+im1SgBg2LBhAJrrnp9++uk455xzAAD9+vXDkCFD8NlnnwEAzj77bPTs2RMWiwW5ubkYPnw4LBYLTjvtNDQ2NqKhoQH/+Mc/UFhYiNTUVADADTfcgE8++QRerxfjxo3DnXfeiblz58LtduPWW29FfX09vvzyS1x77bUAgFNOOQWFhYX4xz/+AaC5VO7IkSMBAKeffjrOO+88dOnSBcnJyejRowd++uknfPXVV6isrMRvf/tbTJgwAbfddhskScK3336rugdNTU04dOgQunTpgjVr1uC5557DokWL8PXXXwfdr5KSEs3igRMmTFDqqxcVFWHSpElB20ybNg0AkJ2djeHDh+Pf//43AGDgwIHKvb766qtRXFyM2tpaAECXLl3QpUsXVFRUhPgmBe0NIfAFMWPw4MEoKSnBiRMnVO+7XC7cdtttSqMKtrqhJEmQmeoeJJy1Jg5ZluHz+QAgqHaKVsVEmasaEggElP3vuecerF69GoMGDcKGDRswdepU+P1+w32SkpJUtWWoxR6L3+9H3759sWnTJuXf2rVrMXz4cNV21PSnsLAQANC7d28MGTIE+/btCzqmJEma96OgoADvv/8+fvzxR5w4cSKoJhUAVVtQmaksabVaVdvJsqx6z+/3B20jaP8IgS+IGdnZ2SgoKMDDDz+sCP0TJ07gD3/4A7p166bZn1SPc845B6WlpYoA/P777/H555/j/PPPN32M4cOHY8OGDaivrwcArFy5Er/4xS9gsVgwcuRI1NfXY/r06Zg/fz4OHjyI5ORknHPOOVi1ahUA4Oeff0ZRURF++ctfmj7nueeei/LycqWEb3FxMS6//PKgBj6nnXYazjrrLGzcuBEAUFVVhT179mDQoEFBx8zLywuKyAGa7/eAAQPw8MMPY8KECZrjoeMfPnwYH3/8sWLjP3DggFK2ee3atRgyZAicTqdy3Y2NjTj11FNNX7egfSCctoKYMn/+fLz88stKjwOv14vRo0dj9uzZYR0nIyMDL7zwAh577DF4PB5IkoRFixYhLy9P5QA2YvLkyThy5AiuueYaBAIB9O7dG08//TRsNhsefvhh3H///bDZbJAkCU888QTsdjuefvppPProo9iwYQO8Xi8KCgpQWFho2ryRkZGBpUuXYsmSJWhsbIQsy1iyZAl69eoVtO2yZcvw6KOPYs2aNQgEAvjtb3+LwYMHB213+eWXY8eOHbj66quDPpswYQIefvhhvPjii5rjaWxsxKRJk9DU1ITf//73yMvLw7Fjx5CVlYXnn38eFRUVyMjIwJIlS5R9du3ahcsuuyxuFSgFbYeolikQJDh+vx+FhYVYvny5KlInUj799FM89thj2Lp1q+bnN9xwAx5++GEMHDgw6nMJEgth0hEIEhyr1YrHHnsMzz77bNzPtWPHDgwbNkwI+w6K0PAFAoGgkyA0fIFAIOgkCIEvEAgEnQQh8AUCgaCTIAS+QCAQdBKEwBcIBIJOghD4AoFA0En4/0D1w90SLq6kAAAAAElFTkSuQmCC",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from matplotlib.ticker import FuncFormatter\n",
    "plt.figsize=(12,6)\n",
    "list_alleles = ['DRB1', 'DQB1', 'DQA1', 'DPB1', 'DPA1']# , 'A','B', 'C']\n",
    "cmap = get_cmap('tab20')\n",
    "\n",
    "# Define a function to convert bp to Mbp\n",
    "def bp_to_mbp(x, pos):\n",
    "    return \"{:.1f}\".format(x / 1000000)  # Divide by 1,000,000 to convert to Mbp\n",
    "\n",
    "#colors = [cmap(i / len(list_alleles)) for i in range(len(list_alleles))]\n",
    "fig, ax = plt.subplots(1, figsize=(6,4))\n",
    "# Increase the size of the x-axis ticks\n",
    "ax.tick_params(axis='both', which='major', labelsize=12)\n",
    "\n",
    "# Create a dictionary to map categories to colors\n",
    "#category_color_map = dict(zip(list_alleles, colors))\n",
    "col_map= {'DRB1':'tab:red', 'DQB1':'tab:green', 'DQA1':'tab:orange', 'DPB1':'gold', 'DPA1':'tab:cyan', 'A':'tab:purple','B':'tab:blue', 'C':'tab:pink'}\n",
    "df_selected[df_selected['allele'] == 'others']['neg_log_p']\n",
    "plt.scatter(x=df_selected[df_selected['allele'] == 'others']['BP'], y=df_selected[df_selected['allele'] == 'others']['neg_log_p'], color='#DDDDDD', s=3)\n",
    "for i in list_alleles:\n",
    "    plt.scatter(x=df_selected[df_selected['allele'] == i]['BP'], y=df_selected[df_selected['allele'] == i]['neg_log_p'], s=3, color=col_map[i], label=i)\n",
    "ax.xaxis.set_major_formatter(FuncFormatter(bp_to_mbp))\n",
    "ax.legend(title='allele', markerscale=3., fontsize=12)\n",
    "# Increase legend fotnsize\n",
    "legend = ax.get_legend()\n",
    "legend.set_title('Allele')\n",
    "legend.get_title().set_fontsize(12)  # Adjust fontsize as needed\n",
    "# Change x y labels\n",
    "ax.set_ylabel('-log10(p-value)', fontsize=12)\n",
    "ax.set_xlabel('Chromosome 6 (Mbp)', fontsize=12)\n",
    "\n",
    "#legend.set_title('allele', fontsize=12) \n",
    "#ax.set_xticklabels(ax.get_xticklabels(), fontsize=12)\n",
    "# Save\n",
    "# plt.savefig('HLA_imputations_alleles.png',facecolor='white',\\\n",
    "#     dpi=300,\n",
    "#         transparent=False,\n",
    "#         bbox_inches = 'tight')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Run other Manhattan plot using the cluster -> script manhattan_plot.py"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "base",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.5"
  },
  "orig_nbformat": 4
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
